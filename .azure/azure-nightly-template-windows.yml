jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 240
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      stack:
        BUILD: stack
    maxParallel: 1
  steps:
  - bash: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$PATH:"/C/Program Files/Mercurial/"
      export TMP=/D/tmp
      choco install hg -y
      curl -sSkL http://www.stackage.org/stack/windows-i386 -o /usr/bin/stack.zip
      unzip -o /usr/bin/stack.zip -d /usr/bin/
      stack setup
      stack --version
    env:
      OS_NAME: ${{ parameters.os }}
    displayName: 'Installation ${{parameters.os}}'
  - bash: |
      export STACK_ROOT="$(Build.SourcesDirectory)"/.stack-root;
      export PATH=$PATH:"/C/Program Files/Mercurial/"
      export TMP=/D/tmp
      set -ex
      stack install cabal-install
      stack test --flag stack:integration-tests stack:test:stack-integration-test
      set +ex
    displayName: Integration Test
  - powershell: |
      $env:STACK_ROOT = "$(Build.SourcesDirectory)\.stack-root"
      $env:PATH += ";$env:HOME\.local\bin"
      stack install stack --local-bin-path $(Build.ArtifactStagingDirectory)
    displayName: Gzip Stack
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: stack-windows
    condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
    displayName: 'Cache data'
